{"version":3,"sources":["../src/IntervalResizer.jsx"],"names":["propTypes","intervalUnit","number","isRequired","children","element","documentRef","object","timeoutDelay","minHeight","maxHeight","className","string","instantOnReceiveProps","bool","screenWidthCutoff","defaultProps","IntervalResizer","waitToRender","uid","Date","valueOf","Math","ceil","random","windowResizeListener","bind","resizeTimeout","window","addEventListener","props","removeEventListener","instant","clearTimeout","setTimeout","setWrapperHeight","resizeWrapper","getElementById","internalWrapper","firstChild","documentElement","clientWidth","style","height","contentHeight","offsetHeight","newHeight","getIntervalHeight","String","max","min","floor"],"mappings":"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","file":"IntervalResizer.js","sourcesContent":["\r\n/* IntervalResizer.jsx -- A React resizer which detects the height of its\r\n * internals, then expands them to the next-biggest multiple of a pre-defined\r\n * interval.\r\n *\r\n * Copyright (C) 2017 Liam Ross\r\n *\r\n * This software may be modified and distributed under the terms of the MIT\r\n * license. See the LICENSE file for details.\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst propTypes = {\r\n  intervalUnit: PropTypes.number.isRequired,  // Unit interval to grow by.\r\n  children: PropTypes.element.isRequired,     // Child to populate wrapper.\r\n  documentRef: PropTypes.object.isRequired,   // Reference to the document.\r\n  timeoutDelay: PropTypes.number,             // The re-render timeout.\r\n  minHeight: PropTypes.number,                // The resizer's minimum height.\r\n  maxHeight: PropTypes.number,                // The resizer's maximum height.\r\n  className: PropTypes.string,                // A general class.\r\n  instantOnReceiveProps: PropTypes.bool,      // Instant resize on get props.\r\n  screenWidthCutoff: PropTypes.number,        // Stop intervals at this width.\r\n};\r\n\r\nconst defaultProps = {\r\n  timeoutDelay: 0,              // No delay by default.\r\n  minHeight: null,              // No min height by default.\r\n  maxHeight: null,              // No max height by default.\r\n  className: null,              // No class by default.\r\n  instantOnReceiveProps: true,  // Instant resize on prop change by default.\r\n  screenWidthCutoff: 0,         // Cutoff at 0 width by default.\r\n};\r\n\r\nclass IntervalResizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.waitToRender = null;\r\n    this.uid = new Date().valueOf() + '-' + Math.ceil(Math.random() * 10000000);\r\n    this.windowResizeListener = this.windowResizeListener.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resizeTimeout(true);\r\n    window.addEventListener('resize', this.windowResizeListener);\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.resizeTimeout(this.props.instantOnReceiveProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.windowResizeListener);\r\n  }\r\n\r\n  /**\r\n   * Necessary to discard arguments passed from event listener binding and\r\n   * pass false instead as resizeTimeout's 'instant' parameter.\r\n   */\r\n  windowResizeListener() {\r\n    this.resizeTimeout(false);\r\n  }\r\n\r\n  /**\r\n   * Starts a timeout based off of timeoutDelay prop. If function is called\r\n   * while timeout is in progress, it clears the timeout and begins again. Takes\r\n   * a boolean to determine whether it will call instantly.\r\n   * @param {boolean} instant - True to call setWrapperHeight instantly, false\r\n   * to wait for timeoutDelay.\r\n   */\r\n  resizeTimeout(instant) {\r\n    clearTimeout(this.waitToRender);\r\n    this.waitToRender = setTimeout(() => {\r\n      this.setWrapperHeight();\r\n    }, instant ? 0 : this.props.timeoutDelay);\r\n  }\r\n\r\n  /**\r\n   * Detects the internal wrapper height and sets the resize wrapper to the next\r\n   * larger intervalUnit multiple, then adjusts the content to fit that height.\r\n   * If the window is smaller than the screenWidthCutoff, then the component\r\n   * will match the height of the internals with no intervals.\r\n   */\r\n  setWrapperHeight() {\r\n    const { screenWidthCutoff, documentRef } = this.props;\r\n    const resizeWrapper = documentRef.getElementById(this.uid);\r\n    const internalWrapper = resizeWrapper.firstChild;\r\n    if (documentRef.documentElement.clientWidth > screenWidthCutoff) {\r\n      internalWrapper.style.height = 'auto';\r\n      const contentHeight = internalWrapper.offsetHeight;\r\n      const newHeight = this.getIntervalHeight(contentHeight);\r\n      resizeWrapper.style.height = `${String(newHeight)}px`;\r\n      internalWrapper.style.height = '100%';\r\n    } else {\r\n      resizeWrapper.style.height = 'auto';\r\n      internalWrapper.style.height = 'auto';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the height to a multiple of the intervalUnit unit, while accounting\r\n   * for the minHeight and maxHeight. Will override minHeight with maxHeight if\r\n   * maxHeight is smaller than minHeight.\r\n   * @param {number} contentHeight - The 'auto' height of the content.\r\n   * @returns {number} - Returns a multiple of your intervalUnit.\r\n   */\r\n  getIntervalHeight(contentHeight) {\r\n    const { intervalUnit, minHeight, maxHeight } = this.props;\r\n    let newHeight = Math.ceil(contentHeight / intervalUnit) * intervalUnit;\r\n    if (minHeight !== null) {\r\n      newHeight = Math.max(\r\n        newHeight,\r\n        Math.ceil(minHeight / intervalUnit) * intervalUnit,\r\n      );\r\n    }\r\n    if (maxHeight !== null) {\r\n      newHeight = Math.min(\r\n        newHeight,\r\n        Math.floor(maxHeight / intervalUnit) * intervalUnit,\r\n      );\r\n    }\r\n    return newHeight;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id={this.uid}\r\n        className={this.props.className}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIntervalResizer.propTypes = propTypes;\r\nIntervalResizer.defaultProps = defaultProps;\r\n\r\nexport default IntervalResizer;\r\n"]}