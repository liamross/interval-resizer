{"version":3,"sources":["../src/IntervalResizer.jsx"],"names":["propTypes","intervalUnit","number","isRequired","children","element","timeoutDelay","instantOnReceiveProps","bool","minHeight","maxHeight","className","string","screenWidthCutoff","defaultProps","IntervalResizer","props","waitToRender","uid","Date","valueOf","Math","ceil","random","windowResizeListener","bind","uniqueId","console","warn","documentRef","resizeTimeout","window","addEventListener","removeEventListener","instant","clearTimeout","setTimeout","setWrapperHeight","resizeWrapper","document","getElementById","internalWrapper","firstChild","documentElement","clientWidth","style","height","contentHeight","offsetHeight","newHeight","getIntervalHeight","String","max","min","floor"],"mappings":"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","file":"IntervalResizer.js","sourcesContent":["\r\n/* IntervalResizer.jsx -- A React resizer which detects the height of its\r\n * internals, then expands them to the next-biggest multiple of a pre-defined\r\n * interval.\r\n *\r\n * Copyright (C) 2017 Liam Ross\r\n *\r\n * This software may be modified and distributed under the terms of the MIT\r\n * license. See the LICENSE file for details.\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst propTypes = {\r\n  intervalUnit: PropTypes.number.isRequired,  // Unit interval to grow by.\r\n  children: PropTypes.element.isRequired,     // Child to populate wrapper.\r\n  timeoutDelay: PropTypes.number,             // The re-render timeout.\r\n  instantOnReceiveProps: PropTypes.bool,      // Instant resize on get props.\r\n  minHeight: PropTypes.number,                // The resizer's minimum height.\r\n  maxHeight: PropTypes.number,                // The resizer's maximum height.\r\n  className: PropTypes.string,                // A general class.\r\n  screenWidthCutoff: PropTypes.number,        // Stop intervals at this width.\r\n};\r\n\r\nconst defaultProps = {\r\n  timeoutDelay: 0,              // No delay by default.\r\n  instantOnReceiveProps: true,  // Instant resize on prop change by default.\r\n  minHeight: null,              // No min height by default.\r\n  maxHeight: null,              // No max height by default.\r\n  className: null,              // No class by default.\r\n  screenWidthCutoff: 0,         // Cutoff at 0 width by default.\r\n};\r\n\r\nclass IntervalResizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.waitToRender = null;\r\n    this.uid = new Date().valueOf() + '-' + Math.ceil(Math.random() * 10000000);\r\n    this.windowResizeListener = this.windowResizeListener.bind(this);\r\n    props.uniqueId && console.warn('uniqueId is depreciated as of 2.1.0,'\r\n      + ' and is no longer used, you can remove the prop from your code.');\r\n    props.documentRef && console.warn('documentRef is depreciated as of 2.2.0,'\r\n      + ' and is no longer used, you can remove the prop from your code.');\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resizeTimeout(true);\r\n    window.addEventListener('resize', this.windowResizeListener);\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.resizeTimeout(this.props.instantOnReceiveProps);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.windowResizeListener);\r\n  }\r\n\r\n  /**\r\n   * Necessary to discard arguments passed from event listener binding and\r\n   * pass false instead as resizeTimeout's 'instant' parameter.\r\n   */\r\n  windowResizeListener() {\r\n    this.resizeTimeout(false);\r\n  }\r\n\r\n  /**\r\n   * Starts a timeout based off of timeoutDelay prop. If function is called\r\n   * while timeout is in progress, it clears the timeout and begins again. Takes\r\n   * a boolean to determine whether it will call instantly.\r\n   * @param {boolean} instant - True to call setWrapperHeight instantly, false\r\n   * to wait for timeoutDelay.\r\n   */\r\n  resizeTimeout(instant) {\r\n    clearTimeout(this.waitToRender);\r\n    this.waitToRender = setTimeout(() => {\r\n      this.setWrapperHeight();\r\n    }, instant ? 0 : this.props.timeoutDelay);\r\n  }\r\n\r\n  /**\r\n   * Detects the internal wrapper height and sets the resize wrapper to the next\r\n   * larger intervalUnit multiple, then adjusts the content to fit that height.\r\n   * If the window is smaller than the screenWidthCutoff, then the component\r\n   * will match the height of the internals with no intervals.\r\n   */\r\n  setWrapperHeight() {\r\n    const { screenWidthCutoff } = this.props;\r\n    const resizeWrapper = window.document.getElementById(this.uid);\r\n    const internalWrapper = resizeWrapper.firstChild;\r\n    if (window.document.documentElement.clientWidth > screenWidthCutoff) {\r\n      internalWrapper.style.height = 'auto';\r\n      const contentHeight = internalWrapper.offsetHeight;\r\n      const newHeight = this.getIntervalHeight(contentHeight);\r\n      resizeWrapper.style.height = `${String(newHeight)}px`;\r\n      internalWrapper.style.height = '100%';\r\n    } else {\r\n      resizeWrapper.style.height = 'auto';\r\n      internalWrapper.style.height = 'auto';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the height to a multiple of the intervalUnit unit, while accounting\r\n   * for the minHeight and maxHeight. Will override minHeight with maxHeight if\r\n   * maxHeight is smaller than minHeight.\r\n   * @param {number} contentHeight - The 'auto' height of the content.\r\n   * @returns {number} - Returns a multiple of your intervalUnit.\r\n   */\r\n  getIntervalHeight(contentHeight) {\r\n    const { intervalUnit, minHeight, maxHeight } = this.props;\r\n    let newHeight = Math.ceil(contentHeight / intervalUnit) * intervalUnit;\r\n    if (minHeight !== null) {\r\n      newHeight = Math.max(\r\n        newHeight,\r\n        Math.ceil(minHeight / intervalUnit) * intervalUnit,\r\n      );\r\n    }\r\n    if (maxHeight !== null) {\r\n      newHeight = Math.min(\r\n        newHeight,\r\n        Math.floor(maxHeight / intervalUnit) * intervalUnit,\r\n      );\r\n    }\r\n    return newHeight;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id={this.uid}\r\n        className={this.props.className}>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nIntervalResizer.propTypes = propTypes;\r\nIntervalResizer.defaultProps = defaultProps;\r\n\r\nexport default IntervalResizer;\r\n"]}